
// cron.schedule("*/5 * * * * *", async () => {
//   console.log("Running a task every 15 seconds");
  
//   const { data: pinpoints, error } = await supabase
//     .from("pinpoints")
//     .select("id, latitude, longitude");

//     console.log(pinpoints);

//   if (error) {
//     console.error("Error fetching pinpoints from Supabase:", error);
//     return;
//   }

//   if (!pinpoints) {
//     console.log("No pinpoints available.");
//     return;
//   }

//   for (const pinpoint of pinpoints) {
//     const { id, latitude, longitude } = pinpoint;
//     const radius = 1000;

//     console.log(`Processing pinpoint ID: ${id}, Latitude: ${latitude}, Longitude: ${longitude}`);

//     try {
//       const response = await fetch("https://places.googleapis.com/v1/places:searchNearby", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           "X-Goog-Api-Key": process.env.GOOGLE_PLACES_API_KEY!,
//           "X-Goog-FieldMask": "places.displayName,places.location,places.rating,places.googleMapsUri,places.id",
//         },
//         body: JSON.stringify({
//           includedTypes: ["bar", "night_club"],
//           maxResultCount: 5,
//           locationRestriction: {
//             circle: {
//               center: { latitude, longitude },
//               radius,
//             },
//           },
//         }),
//       });

//       const data:any = await response.json();
//       console.log(data);

//       if (!data || !data.places) {
//         console.error(`No places found for pinpoint ID: ${id}`);
//         continue;
//       }

//       console.log(`Fetched ${data.places.length} places for pinpoint ID: ${id}`);

//       const placesToInsert = data.places.map((place: any) => ({
//         pinpoint_id: id,
//         google_id: place.id,
//         name: place.displayName.text,
//         latitude: place.location.latitude,
//         longitude: place.location.longitude,
//         place_url: place.googleMapsUri,
//       }));

//       const { error: insertError } = await supabase.from("google_places").upsert(placesToInsert);

//       if (insertError) {
//         console.error("Error inserting places into Supabase:", insertError);
//       } else {
//         console.log(`Successfully inserted places for pinpoint ID: ${id}`);
//       }
//     } catch (error) {
//       console.error(`Error processing pinpoint ID: ${id}`, error);
//     }
//   }
// });